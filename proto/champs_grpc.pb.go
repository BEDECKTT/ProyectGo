// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: proto/champs.proto

package champs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ChampService_GetChampInfo_FullMethodName    = "/champs.ChampService/GetChampInfo"
	ChampService_GetChampList_FullMethodName    = "/champs.ChampService/GetChampList"
	ChampService_AddChamps_FullMethodName       = "/champs.ChampService/AddChamps"
	ChampService_GetChampsbyType_FullMethodName = "/champs.ChampService/GetChampsbyType"
)

// ChampServiceClient is the client API for ChampService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChampServiceClient interface {
	GetChampInfo(ctx context.Context, in *ChampRequest, opts ...grpc.CallOption) (*ChampResponse, error)
	GetChampList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChampResponse], error)
	AddChamps(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[NewChampRequest, AddChampResponse], error)
	GetChampsbyType(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ChampTypeRequest, ChampResponse], error)
}

type champServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChampServiceClient(cc grpc.ClientConnInterface) ChampServiceClient {
	return &champServiceClient{cc}
}

func (c *champServiceClient) GetChampInfo(ctx context.Context, in *ChampRequest, opts ...grpc.CallOption) (*ChampResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChampResponse)
	err := c.cc.Invoke(ctx, ChampService_GetChampInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *champServiceClient) GetChampList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChampResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChampService_ServiceDesc.Streams[0], ChampService_GetChampList_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Empty, ChampResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChampService_GetChampListClient = grpc.ServerStreamingClient[ChampResponse]

func (c *champServiceClient) AddChamps(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[NewChampRequest, AddChampResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChampService_ServiceDesc.Streams[1], ChampService_AddChamps_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[NewChampRequest, AddChampResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChampService_AddChampsClient = grpc.ClientStreamingClient[NewChampRequest, AddChampResponse]

func (c *champServiceClient) GetChampsbyType(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ChampTypeRequest, ChampResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChampService_ServiceDesc.Streams[2], ChampService_GetChampsbyType_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChampTypeRequest, ChampResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChampService_GetChampsbyTypeClient = grpc.BidiStreamingClient[ChampTypeRequest, ChampResponse]

// ChampServiceServer is the server API for ChampService service.
// All implementations must embed UnimplementedChampServiceServer
// for forward compatibility.
type ChampServiceServer interface {
	GetChampInfo(context.Context, *ChampRequest) (*ChampResponse, error)
	GetChampList(*Empty, grpc.ServerStreamingServer[ChampResponse]) error
	AddChamps(grpc.ClientStreamingServer[NewChampRequest, AddChampResponse]) error
	GetChampsbyType(grpc.BidiStreamingServer[ChampTypeRequest, ChampResponse]) error
	mustEmbedUnimplementedChampServiceServer()
}

// UnimplementedChampServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChampServiceServer struct{}

func (UnimplementedChampServiceServer) GetChampInfo(context.Context, *ChampRequest) (*ChampResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChampInfo not implemented")
}
func (UnimplementedChampServiceServer) GetChampList(*Empty, grpc.ServerStreamingServer[ChampResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetChampList not implemented")
}
func (UnimplementedChampServiceServer) AddChamps(grpc.ClientStreamingServer[NewChampRequest, AddChampResponse]) error {
	return status.Errorf(codes.Unimplemented, "method AddChamps not implemented")
}
func (UnimplementedChampServiceServer) GetChampsbyType(grpc.BidiStreamingServer[ChampTypeRequest, ChampResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetChampsbyType not implemented")
}
func (UnimplementedChampServiceServer) mustEmbedUnimplementedChampServiceServer() {}
func (UnimplementedChampServiceServer) testEmbeddedByValue()                      {}

// UnsafeChampServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChampServiceServer will
// result in compilation errors.
type UnsafeChampServiceServer interface {
	mustEmbedUnimplementedChampServiceServer()
}

func RegisterChampServiceServer(s grpc.ServiceRegistrar, srv ChampServiceServer) {
	// If the following call pancis, it indicates UnimplementedChampServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ChampService_ServiceDesc, srv)
}

func _ChampService_GetChampInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChampRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChampServiceServer).GetChampInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChampService_GetChampInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChampServiceServer).GetChampInfo(ctx, req.(*ChampRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChampService_GetChampList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChampServiceServer).GetChampList(m, &grpc.GenericServerStream[Empty, ChampResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChampService_GetChampListServer = grpc.ServerStreamingServer[ChampResponse]

func _ChampService_AddChamps_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChampServiceServer).AddChamps(&grpc.GenericServerStream[NewChampRequest, AddChampResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChampService_AddChampsServer = grpc.ClientStreamingServer[NewChampRequest, AddChampResponse]

func _ChampService_GetChampsbyType_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChampServiceServer).GetChampsbyType(&grpc.GenericServerStream[ChampTypeRequest, ChampResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChampService_GetChampsbyTypeServer = grpc.BidiStreamingServer[ChampTypeRequest, ChampResponse]

// ChampService_ServiceDesc is the grpc.ServiceDesc for ChampService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChampService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "champs.ChampService",
	HandlerType: (*ChampServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChampInfo",
			Handler:    _ChampService_GetChampInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetChampList",
			Handler:       _ChampService_GetChampList_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AddChamps",
			Handler:       _ChampService_AddChamps_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetChampsbyType",
			Handler:       _ChampService_GetChampsbyType_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/champs.proto",
}
